<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="implementation-test-suite.xml" />
	<munit:test name="implementation-test-suite-sendMessageToAWSSQSTest_Error" doc:id="6b358e8e-db2f-41ac-ae42-bacb3d23ac53" description="Test">
		<munit:behavior >
			<munit:set-null-payload doc:name="Set null payload" doc:id="27a7175f-e2f9-437a-895f-65fdbc1752ff" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="e0fe84b7-ca8b-4ca8-ab31-4970212537b7" processor="set-payload">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="#[{&#10;&#10;    &quot;severity&quot;: &quot;HIGH&quot;,&#10;&#10;    &quot;eventType&quot;: &quot;InsightsLogs&quot;,&#10;&#10;    &quot;env&quot;: &quot;DEV&quot;,&#10;&#10;    &quot;messageId&quot;: uuid() as String,&#10;&#10;    &quot;muleAppName&quot;: &quot;new-relic-insights&quot;,&#10;&#10;    &quot;intgCreationDate&quot;: now() as String {format: &quot;yyyy-MM-dd'T'HH:mm:ss.ss'Z'&quot;},&#10;&#10;    &quot;payload&quot;: write(payload,'application/json'),&#10;&#10;    &quot;resultMessage&quot;: &quot;Unable to Post the message&quot;,&#10;&#10;    &quot;result&quot;: &quot;Error&quot;,&#10;&#10;    &quot;endpoint&quot;: &quot;/api/second&quot;&#10;&#10;    &#10;&#10;}]" attributeName="value" />
					<munit-tools:with-attribute whereValue="Set Payload" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="ce2931fd-9e79-45b7-a6f4-2ea0212a98b7" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="df30e96d-25b4-4606-9d81-30db9d6c69f4" processor="set-variable">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="NRII-9hAL1UkgtjUL_IXNCcEV0oUdHPWt2w2L" attributeName="value" />
					<munit-tools:with-attribute whereValue="Set Variable" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="2109152e-7ac8-462e-8c86-ee7fb3946422" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="headerkey" attributeName="variableName" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock when" doc:id="d2a1c1ea-c52d-4cff-94c1-e22bf2fdee58" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="POST" attributeName="method" />
					<munit-tools:with-attribute whereValue="Request" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="2bf7e8ad-d2e4-463d-8d6a-55f48dc70105" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="HTTP_Request_configuration" attributeName="config-ref" />
					<munit-tools:with-attribute whereValue="/v1/accounts/3424915/events" attributeName="path" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to sendMessageToAWSSQS" doc:id="f7b27b5f-1a81-4bf6-b13c-85716131f5ae" name="sendMessageToAWSSQS"/>
		</munit:execution>
	</munit:test>
	<munit:test name="sendMessageToAWSSQS-test_success" doc:id="711789bd-61b2-44ad-a0c3-bc353a2811da">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock Is not null" doc:id="a8f43e3d-6351-4913-971c-ae3e354553ce" processor="validation:is-not-null">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="07ff9d33-77ab-4824-8924-420ae7ce98e8" attributeName="doc:id" />
					</munit-tools:with-attributes>
					<munit-tools:then-return>
						<munit-tools:payload value="#[output application/json --- readUrl('classpath://sendMessageToAWSSQStest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:attributes value="#[readUrl('classpath://sendMessageToAWSSQStest\mock_attributes.dwl')]" />
					</munit-tools:then-return>
				</munit-tools:mock-when>
				<munit-tools:mock-when doc:name="Mock Send message" doc:id="77e2dc19-9728-4423-b24f-e45776d5bf24" processor="sqs:send-message">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="936c47d7-d221-408a-9c72-157dfad1ba17" attributeName="doc:id" />
					</munit-tools:with-attributes>
					<munit-tools:then-return>
						<munit-tools:payload value="#[output application/java --- readUrl('classpath://sendMessageToAWSSQStest\mock_payload1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:attributes value="#[readUrl('classpath://sendMessageToAWSSQStest\mock_attributes1.dwl')]" />
					</munit-tools:then-return>
				</munit-tools:mock-when>
				<munit:set-event doc:name="Set Input" doc:id="1cf5cea8-7051-477a-a56e-1e3fd698c1b2">
					<munit:payload value="#[output application/json --- readUrl('classpath://sendMessageToAWSSQStest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:attributes value="#[readUrl('classpath://sendMessageToAWSSQStest\set-event_attributes.dwl')]" />
				</munit:set-event>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="sendMessageToAWSSQS_Success" doc:id="b784b740-791b-4453-80e7-4de9538dc307" name="sendMessageToAWSSQS" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert doc:name="Assert payload" doc:id="13f64a7a-4818-4489-bf17-cf39bbb750bb" message="The payload does not match">
					<munit-tools:that><![CDATA[#[%dw 2.0
import sendMessageToAWSSQStest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
				</munit-tools:assert>
			</munit:validation>
		</munit:test>
	<munit:test name="receiveMessageFromSQSQueue-test_Success_1" doc:id="e1c407ff-d4c4-4ba6-8b4a-7141eb3851d1">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock Set Variable" doc:id="23507383-9733-49d5-865a-7771dbffae98" processor="set-variable">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="09f2fac7-ce06-4391-867c-12f4463d318a" attributeName="doc:id" />
					</munit-tools:with-attributes>
					<munit-tools:then-return>
						<munit-tools:variables>
							<munit-tools:variable key="headerkey" value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_variable_.dwl')]" encoding="UTF-8" />
						</munit-tools:variables>
					</munit-tools:then-return>
				</munit-tools:mock-when>
				<munit-tools:mock-when doc:name="Mock Request" doc:id="a3a36263-8411-4718-b3d9-e2c3b2e1b78d" processor="http:request">
					<munit-tools:with-attributes>
						<munit-tools:with-attribute whereValue="18046b29-df06-4ca8-8759-1e5da5ad3e58" attributeName="doc:id" />
					</munit-tools:with-attributes>
					<munit-tools:then-return>
						<munit-tools:payload value="#[output text/json --- readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_payload.dwl')]" mediaType="text/json" encoding="UTF-8" />
						<munit-tools:attributes value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_attributes.dwl')]" />
						<munit-tools:variables>
							<munit-tools:variable key="headerkey" value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_variable_1.dwl')]" encoding="UTF-8" />
						</munit-tools:variables>
					</munit-tools:then-return>
				</munit-tools:mock-when>
				<munit:set-event doc:name="Set Input" doc:id="b6f29f01-cc70-4163-b30e-9c93ee5f87c3">
					<munit:payload value="#[output text/plain --- readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\set-event_payload.dwl')]" encoding="UTF-8" mediaType="text/plain" />
					<munit:attributes value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\set-event_attributes.dwl')]" />
				</munit:set-event>
			</munit:behavior>
			<munit:execution>
				<flow-ref doc:name="receiveMessageFromSQSQueue" doc:id="07094d29-8eed-4422-9ff8-4f8cf21dd3be" name="receiveMessageFromSQSQueue" />
			</munit:execution>
			<munit:validation>
				<munit-tools:assert doc:name="Assert payload" doc:id="72f6e250-74f7-409f-9fda-23fc2899ec8c" message="The payload does not match">
					<munit-tools:that><![CDATA[#[%dw 2.0
import receiveMessageFromSQSQueuetestSuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
				</munit-tools:assert>
				<munit-tools:assert doc:name="Assert attributes" doc:id="742df8f8-e496-4366-854e-82aae1258f02" message="The attributes do not match">
					<munit-tools:that><![CDATA[#[%dw 2.0
import receiveMessageFromSQSQueuetestSuccess::assert_expression_attributes
---
assert_expression_attributes::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
				</munit-tools:assert>
				<munit-tools:assert doc:name="Assert variables" doc:id="33dea00f-7292-463f-83a9-a56b86e61bb6" message="The variables do not match">
					<munit-tools:that><![CDATA[#[%dw 2.0
import receiveMessageFromSQSQueuetestSuccess::assert_expression_variables
---
assert_expression_variables::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
				</munit-tools:assert>
			</munit:validation>
		</munit:test>
	<munit:test name="implementation-test-suite-receiveMessageFromSQSQueueTest_Failure" doc:id="63e1501c-632b-4728-b5ca-bd2235126940" description="Test">
		<munit:behavior >
			<munit:set-null-payload doc:name="Set null payload" doc:id="1929a521-780c-4caa-9538-a7e32b0c5dcf" />
			<munit-tools:mock-when doc:name="Mock when" doc:id="8015d551-eb3e-4268-a8b0-f6e42a972539" processor="raise-error">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Raise error" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="1a6c3b79-e7a0-4ac8-a81c-fd3443302bc2" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue='"CUSTOM:CUSTOM_ERROR"' attributeName="type" />
					<munit-tools:with-attribute whereValue="no maching condition" attributeName="description" />
				</munit-tools:with-attributes>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to receiveMessageFromSQSQueue" doc:id="6638bf17-f81f-43ff-bc2e-c197f4d038c9" name="receiveMessageFromSQSQueue"/>
		</munit:execution>
	</munit:test>


</mule>
