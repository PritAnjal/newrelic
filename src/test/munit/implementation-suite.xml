<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="implementation-suite.xml" />
	<munit:test name="sendMessageToAWSSQS-test" doc:id="cf1b1659-9d78-4b7f-af23-9f6d1088a27c" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Is not null" doc:id="172ae40b-c3c8-4009-84f6-72aefe23935a" processor="validation:is-not-null">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="07ff9d33-77ab-4824-8924-420ae7ce98e8" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://sendMessageToAWSSQStest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://sendMessageToAWSSQStest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Send message" doc:id="f15989d5-6ad0-4037-a118-5904d4a08d51" processor="sqs:send-message">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="936c47d7-d221-408a-9c72-157dfad1ba17" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://sendMessageToAWSSQStest\mock_payload1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://sendMessageToAWSSQStest\mock_attributes1.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="959b244e-a64c-4d44-9496-4cc079280a2e" >
				<munit:payload value="#[output application/json --- readUrl('classpath://sendMessageToAWSSQStest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://sendMessageToAWSSQStest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to sendMessageToAWSSQS" doc:id="92586fe8-0923-4aeb-bb26-4e717c735ef3" name="sendMessageToAWSSQS"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="abd20746-3933-4f3d-8cf3-1bc5b17d77e6" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import sendMessageToAWSSQStest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="receiveMessageFromSQSQueue-test_Success" doc:id="0577389f-d37c-404c-82a9-f8b4294670f4" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Set Variable" doc:id="ae85899d-b7cc-45d6-91d8-100a29d8a3eb" processor="set-variable">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="09f2fac7-ce06-4391-867c-12f4463d318a" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="headerkey" value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_variable_.dwl')]" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Request" doc:id="a6a946ca-580e-4f8f-a36b-8c8ea86a57ca" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="18046b29-df06-4ca8-8759-1e5da5ad3e58" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/json --- readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_payload.dwl')]" mediaType="text/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="headerkey" value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\mock_variable_1.dwl')]" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="3af2e336-cff1-4017-86f3-5f946acf2614" >
				<munit:payload value="#[output text/plain --- readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\set-event_payload.dwl')]" encoding="UTF-8" mediaType="text/plain" />
				<munit:attributes value="#[readUrl('classpath://receiveMessageFromSQSQueuetestSuccess\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to receiveMessageFromSQSQueue" doc:id="cbae8e6e-5c85-495a-b434-2cdc0d957d36" name="receiveMessageFromSQSQueue"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="8d1b0097-87fd-4476-9a39-999b8ba8f7f4" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import receiveMessageFromSQSQueuetestSuccess::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:assert doc:name="Assert attributes" doc:id="ce35eb60-1e05-4dd5-8a43-3cb7b44fb98c" message="The attributes do not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import receiveMessageFromSQSQueuetestSuccess::assert_expression_attributes
---
assert_expression_attributes::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:assert doc:name="Assert variables" doc:id="7e59b6d9-2c9f-4518-92fb-ae7df167b295" message="The variables do not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import receiveMessageFromSQSQueuetestSuccess::assert_expression_variables
---
assert_expression_variables::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
